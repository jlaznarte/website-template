
TensorFlow

Install Learn

    Introduction
    New to TensorFlow?
    TensorFlow
    The core open source ML library
    For JavaScript
    TensorFlow.js for ML using JavaScript
    For Mobile & IoT
    TensorFlow Lite for mobile and embedded devices
    For Production
    TensorFlow Extended for end-to-end ML components
    Swift for TensorFlow (in beta)

API

    API r1
    r1.14 (stable)
    r1.13
    r1.12
    r1.11
    r1.10
    r1.9
    More…

    API r2
    r2.0 (beta)

Resources

    Models & datasets
    Pre-trained models and datasets built by Google and the community
    Tools
    Ecosystem of tools to help you use TensorFlow
    Libraries & extensions
    Libraries and extensions built on TensorFlow

Community More
Why TensorFlow

    About
    Case studies

Language

    Language
    English
    Português
    Türkçe
    Русский
    中文 – 简体
    日本語
    한국어

GitHub
Sign in

    TensorFlow Core

Overview Tutorials Guide TF 2.0 Beta More

    Install
    Learn
        More
        Overview
        Tutorials
        Guide
        TF 2. 0 Beta
    API
        More
    Resources
        More
    Community
    Why TensorFlow
        More
    GitHub

    Get started with TensorFlow
    Learn and use ML
        Overview
        Basic classification
        Text classification
        Regression
        Overfitting and underfitting
        Save and restore models
    Research and experimentation
        Overview
        Eager execution
        Automatic differentiation
        Custom training: basics
        Custom layers
        Custom training: walkthrough
    ML at production scale
        Linear model with Estimators
        Wide and deep learning
        Boosted trees
        Boosted trees model understanding
        Build a CNN using Estimators
    Generative models
        DCGAN
        VAE
    Distributed training
        Keras
        Training Loops
    Images
        Transfer learning with TFHub
        Transfer learning with pretrained CNNs
        Pix2Pix
        Neural style transfer
        Image segmentation
        Advanced CNN
    Sequences
        Text generation with an RNN
        Translation with attention
        Image captioning
        Recurrent neural network
        Drawing classification
        Simple audio recognition
        Neural machine translation
    Load data
        Load images
        TFRecords and tf. Example
    Data representation
        Vector representations of words
        Kernel methods
        Large-scale linear models
        Unicode
    Non-ML
        Mandelbrot set
        Partial differential equations

    Introduction
    TensorFlow
    For JavaScript
    For Mobile & IoT
    For Production
    Swift for TensorFlow (in beta)

    API r1
    r1. 14 (stable)
    r1. 13
    r1. 12
    r1. 11
    r1. 10
    r1. 9
    More…
    API r2
    r2. 0 (beta)

    Models & datasets
    Tools
    Libraries & extensions

    About
    Case studies

TensorFlow 2.0 Beta is available Learn more

    TensorFlow
    Learn
    TensorFlow Core
    Tutorials

Train your first neural network: basic classification
View on TensorFlow.org 	Run in Google Colab 	View source on GitHub

This guide trains a neural network model to classify images of clothing, like sneakers and shirts. It's okay if you don't understand all the details, this is a fast-paced overview of a complete TensorFlow program with the details explained as we go.

This guide uses tf.keras , a high-level API to build and train models in TensorFlow.

 from __future__ import absolute_import , division , print_function , unicode_literals

# TensorFlow and tf.keras
import tensorflow as tf
from tensorflow import keras

# Helper libraries
import numpy as np
import matplotlib . pyplot as plt

print ( tf . __version__ )
 

 1.14.0

Import the Fashion MNIST dataset

This guide uses the Fashion MNIST dataset which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 by 28 pixels), as seen here:
Fashion MNIST sprite
Figure 1. Fashion-MNIST samples (by Zalando, MIT License).
 

Fashion MNIST is intended as a drop-in replacement for the classic MNIST dataset—often used as the "Hello, World" of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc) in an identical format to the articles of clothing we'll use here.

This guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They're good starting points to test and debug code.

We will use 60,000 images to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow, just import and load the data:

 fashion_mnist = keras . datasets . fashion_mnist

( train_images , train_labels ), ( test_images , test_labels ) = fashion_mnist . load_data ()
 

 Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz
32768/29515 [=================================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz
26427392/26421880 [==============================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz
8192/5148 [===============================================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz
4423680/4422102 [==============================] - 0s 0us/step

Loading the dataset returns four NumPy arrays:

    The train_images and train_labels arrays are the training set —the data the model uses to learn.
    The model is tested against the test set , the test_images , and test_labels arrays.

The images are 28x28 NumPy arrays, with pixel values ranging between 0 and 255. The labels are an array of integers, ranging from 0 to 9. These correspond to the class of clothing the image represents:
Label 	Class
0 	T-shirt/top
1 	Trouser
2 	Pullover
3 	Dress
4 	Coat
5 	Sandal
6 	Shirt
7 	Sneaker
8 	Bag
9 	Ankle boot

Each image is mapped to a single label. Since the class names are not included with the dataset, store them here to use later when plotting the images:

 class_names = [ 'T-shirt/top' , 'Trouser' , 'Pullover' , 'Dress' , 'Coat' ,
                'Sandal' , 'Shirt' , 'Sneaker' , 'Bag' , 'Ankle boot' ]
 

Explore the data

Let's explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:

 train_images . shape
 

 (60000, 28, 28)

Likewise, there are 60,000 labels in the training set:

 len ( train_labels )
 

 60000

Each label is an integer between 0 and 9:

 train_labels
 

 array([9, 0, 0, ..., 3, 0, 5], dtype=uint8)

There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels:

 test_images . shape
 

 (10000, 28, 28)

And the test set contains 10,000 images labels:

 len ( test_labels )
 

 10000

Preprocess the data

The data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:

 plt . figure ()
plt . imshow ( train_images [ 0 ])
plt . colorbar ()
plt . grid ( False )
plt . show ()
 

png

We scale these values to a range of 0 to 1 before feeding to the neural network model. For this, we divide the values by 255. It's important that the training set and the testing set are preprocessed in the same way:

 train_images = train_images / 255.0

test_images = test_images / 255.0
 

Display the first 25 images from the training set and display the class name below each image. Verify that the data is in the correct format and we're ready to build and train the network.

 plt . figure ( figsize =( 10 , 10 ))
for i in range ( 25 ):
    plt . subplot ( 5 , 5 , i + 1 )
    plt . xticks ([])
    plt . yticks ([])
    plt . grid ( False )
    plt . imshow ( train_images [ i ], cmap = plt . cm . binary )
    plt . xlabel ( class_names [ train_labels [ i ]])
plt . show ()
 

png
Build the model

Building the neural network requires configuring the layers of the model, then compiling the model.
Setup the layers

The basic building block of a neural network is the layer . Layers extract representations from the data fed into them. And, hopefully, these representations are more meaningful for the problem at hand.

Most of deep learning consists of chaining together simple layers. Most layers, like tf.keras.layers.Dense , have parameters that are learned during training.

 model = keras . Sequential ([
    keras . layers . Flatten ( input_shape =( 28 , 28 )),
    keras . layers . Dense ( 128 , activation = tf . nn . relu ),
    keras . layers . Dense ( 10 , activation = tf . nn . softmax )
])
 

 WARNING: Logging before flag parsing goes to stderr.
W0625 16:18:58.145840 140078370072320 deprecation.py:506] From /home/kbuilder/.local/lib/python3.5/site-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor

The first layer in this network, tf.keras.layers.Flatten , transforms the format of the images from a 2d-array (of 28 by 28 pixels), to a 1d-array of 28 * 28 = 784 pixels. Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data.

After the pixels are flattened, the network consists of a sequence of two tf.keras.layers.Dense layers. These are densely-connected, or fully-connected, neural layers. The first Dense layer has 128 nodes (or neurons). The second (and last) layer is a 10-node softmax layer—this returns an array of 10 probability scores that sum to 1. Each node contains a score that indicates the probability that the current image belongs to one of the 10 classes.
Compile the model

Before the model is ready for training, it needs a few more settings. These are added during the model's compile step:

    Loss function —This measures how accurate the model is during training. We want to minimize this function to "steer" the model in the right direction.
    Optimizer —This is how the model is updated based on the data it sees and its loss function.
    Metrics —Used to monitor the training and testing steps. The following example uses accuracy , the fraction of the images that are correctly classified.

 model . compile ( optimizer = 'adam' ,
              loss = 'sparse_categorical_crossentropy' ,
              metrics =[ 'accuracy' ])
 

Train the model

Training the neural network model requires the following steps:

    Feed the training data to the model—in this example, the train_images and train_labels arrays.
    The model learns to associate images and labels.
    We ask the model to make predictions about a test set—in this example, the test_images array. We verify that the predictions match the labels from the test_labels array.

To start training, call the model.fit method—the model is "fit" to the training data:

 model . fit ( train_images , train_labels , epochs = 5 )
 

 Epoch 1/5
60000/60000 [==============================] - 4s 75us/sample - loss: 0.5018 - acc: 0.8241
Epoch 2/5
60000/60000 [==============================] - 4s 71us/sample - loss: 0.3763 - acc: 0.8643
Epoch 3/5
60000/60000 [==============================] - 4s 71us/sample - loss: 0.3382 - acc: 0.8777
Epoch 4/5
60000/60000 [==============================] - 4s 72us/sample - loss: 0.3138 - acc: 0.8846
Epoch 5/5
60000/60000 [==============================] - 4s 72us/sample - loss: 0.2967 - acc: 0.8897

<tensorflow.python.keras.callbacks.History at 0x7f65fb64b5c0>

As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.88 (or 88%) on the training data.
Evaluate accuracy

Next, compare how the model performs on the test dataset:

 test_loss , test_acc = model . evaluate ( test_images , test_labels )

print ( 'Test accuracy:' , test_acc )
 

 10000/10000 [==============================] - 1s 51us/sample - loss: 0.3653 - acc: 0.8671
Test accuracy: 0.8671

It turns out, the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy is an example of overfitting . Overfitting is when a machine learning model performs worse on new data than on their training data.
Make predictions

With the model trained, we can use it to make predictions about some images.

 predictions = model . predict ( test_images )
 

Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction:

 predictions [ 0 ]
 

 array([6.58371528e-06, 1.36480646e-10, 4.17183337e-08, 1.15178166e-10,
       8.30939484e-07, 1.49914682e-01, 3.11488043e-06, 4.63472381e-02,
       6.10820061e-05, 8.03666413e-01], dtype=float32)

A prediction is an array of 10 numbers. These describe the "confidence" of the model that the image corresponds to each of the 10 different articles of clothing. We can see which label has the highest confidence value:

 np . argmax ( predictions [ 0 ])
 

 9

So the model is most confident that this image is an ankle boot, or class_names[9] . And we can check the test label to see this is correct:

 test_labels [ 0 ]
 

 9

We can graph this to look at the full set of 10 class predictions

 def plot_image ( i , predictions_array , true_label , img ):
  predictions_array , true_label , img = predictions_array [ i ], true_label [ i ], img [ i ]
  plt . grid ( False )
  plt . xticks ([])
  plt . yticks ([])
 
  plt . imshow ( img , cmap = plt . cm . binary )
 
  predicted_label = np . argmax ( predictions_array )
  if predicted_label == true_label :
    color = 'blue'
  else :
    color = 'red'
 
  plt . xlabel ( "{} {:2.0f}% ({})" . format ( class_names [ predicted_label ],
                                100 * np . max ( predictions_array ),
                                class_names [ true_label ]),
                                color = color )

def plot_value_array ( i , predictions_array , true_label ):
  predictions_array , true_label = predictions_array [ i ], true_label [ i ]
  plt . grid ( False )
  plt . xticks ([])
  plt . yticks ([])
  thisplot = plt . bar ( range ( 10 ), predictions_array , color = "#777777" )
  plt . ylim ([ 0 , 1 ])
  predicted_label = np . argmax ( predictions_array )
 
  thisplot [ predicted_label ]. set_color ( 'red' )
  thisplot [ true_label ]. set_color ( 'blue' )
 

Let's look at the 0th image, predictions, and prediction array.

 i = 0
plt . figure ( figsize =( 6 , 3 ))
plt . subplot ( 1 , 2 , 1 )
plot_image ( i , predictions , test_labels , test_images )
plt . subplot ( 1 , 2 , 2 )
plot_value_array ( i , predictions ,  test_labels )
plt . show ()
 

png

 i = 12
plt . figure ( figsize =( 6 , 3 ))
plt . subplot ( 1 , 2 , 1 )
plot_image ( i , predictions , test_labels , test_images )
plt . subplot ( 1 , 2 , 2 )
plot_value_array ( i , predictions ,  test_labels )
plt . show ()
 

png

Let's plot several images with their predictions. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percent (out of 100) for the predicted label. Note that it can be wrong even when very confident.

 # Plot the first X test images, their predicted label, and the true label
# Color correct predictions in blue, incorrect predictions in red
num_rows = 5
num_cols = 3
num_images = num_rows * num_cols
plt . figure ( figsize =( 2 * 2 * num_cols , 2 * num_rows ))
for i in range ( num_images ):
  plt . subplot ( num_rows , 2 * num_cols , 2 * i + 1 )
  plot_image ( i , predictions , test_labels , test_images )
  plt . subplot ( num_rows , 2 * num_cols , 2 * i + 2 )
  plot_value_array ( i , predictions , test_labels )
plt . show ()
 

png

Finally, use the trained model to make a prediction about a single image.

 # Grab an image from the test dataset
img = test_images [ 0 ]

print ( img . shape )
 

 (28, 28)

tf.keras models are optimized to make predictions on a batch , or collection, of examples at once. So even though we're using a single image, we need to add it to a list:

 # Add the image to a batch where it's the only member.
img = ( np . expand_dims ( img , 0 ))

print ( img . shape )
 

 (1, 28, 28)

Now predict the image:

 predictions_single = model . predict ( img )

print ( predictions_single )
 

 [[6.5837266e-06 1.3648087e-10 4.1718483e-08 1.1517859e-10 8.3093937e-07
  1.4991476e-01 3.1148918e-06 4.6347316e-02 6.1082108e-05 8.0366623e-01]]

 plot_value_array ( 0 , predictions_single , test_labels )
plt . xticks ( range ( 10 ), class_names , rotation = 45 )
plt . show ()
 

png

model.predict returns a list of lists, one for each image in the batch of data. Grab the predictions for our (only) image in the batch:

 prediction_result = np . argmax ( predictions_single [ 0 ])
print ( prediction_result )
 

 9

And, as before, the model predicts a label of 9.

 #@title MIT License
#
# Copyright (c) 2017 François Chollet
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
 

Was this page helpful?

Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License . For details, see the Google Developers Site Policies . Java is a registered trademark of Oracle and/or its affiliates.

    Stay connected
        Blog
        GitHub
        Twitter
        YouTube
    Support
        Issue tracker
        Release notes
        Stack Overflow
        Brand guidelines

    Terms
    Privacy

Language

    Language
    English
    Português
    Türkçe
    Русский
    中文 – 简体
    日本語
    한국어

We serve cookies on this site to analyse traffic, remember your preferences, and optimise your experience.
More details OK
